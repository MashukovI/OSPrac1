format binary as 'img'
org 0x7C00
jmp start

x1 db "Mashukov", 0  ; Переменная x1 - строка "Mashukov" с нулевым символом в конце
x2 db "Ivan", 0  ; Переменная x2 - строка "Ivan" с нулевым символом в конце
x3 db "VladimiroVICH", 0  ; Переменная x3 - строка "VladimiroVICH" с нулевым символом в конце
x4 db "NMT-313901", 0  ; Переменная x4 - строка "NMT-313901" с нулевым символом в конце

;стек
start:
cli  ; Отключить прерывания
mov ax, 0  ; Перемещение значения 0 в регистр ax
mov ss, ax  ; Перемещение значения из ax в сегментный регистр ss
mov sp, 0xFFFF  ; Установка указателя стека (sp) на максимальное значение (начало стека)

sti  ; Включить прерывания
mov ax, 0x13  ; Загрузка значения 0x13 в регистр ax (режим 320x200 256-цветов)
int 0x10  ; Вызов прерывания BIOS для установки режима графики

mov ax, 0x0010  ; Загрузка значения 0x0010 в регистр ax
int 0x10  ; Вызов прерывания BIOS для установки видеорежима

; Основные параметры размера и вывода овала
push 535  ; Помещение параметра 500 (X0) на стек
push 167  ; Помещение параметра 167 (Y0) на стек
push 100  ; Помещение параметра 100 (RX) на стек
push 50  ; Помещение параметра 50 (RY) на стек
push 7  ; Помещение параметра 7 на стек
call Oval  ; Вызов функции рисования овала

  ;вывод текста
   mov ah, 0x0B         ; устанавливаем значение 0x0B в регистр ah
mov bl, 0x08         ; устанавливаем значение 0x2C в регистр bl
int 0x10             ; вызываем прерывание 0x10 (вывод символа)

mov ah, 0x13         ; устанавливаем значение 0x13 в регистр ah
mov al, 0            ; устанавливаем значение 0 в регистр al
mov bh, 0            ; устанавливаем значение 0 в регистр bh
mov bl, 0x1A         ; цвет текста
mov dl, 1           ; устанавливаем значение 1 в регистр dl
mov dh, 10           ; устанавливаем значение 10 в регистр dh
push cs              ; помещаем значение cs на стек
pop es               ; извлекаем значение сегмента cs в регистр es
mov bp, x1           ; устанавливаем значение x1 в регистр bp
mov cx, 8            ; устанавливаем значение 9 в регистр cx
int 0x10             ; вызываем прерывание 0x10

mov ah, 0x13         ; устанавливаем значение 0x13 в регистр ah
mov al, 0            ; устанавливаем значение 0 в регистр al
mov bh, 0            ; устанавливаем значение 0 в регистр bh
mov bl, 0x1A         ; цвет текста
mov dl, 1            ; устанавливаем значение 1 в регистр dl
mov dh, 11           ; устанавливаем значение 11 в регистр dh
push cs              ; помещаем значение cs на стек
pop es               ; извлекаем значение сегмента cs в регистр es
mov bp, x2           ; устанавливаем значение x2 в регистр bp
mov cx, 4            ; устанавливаем значение 6 в регистр cx
int 0x10             ; вызываем прерывание 0x10
mov ah, 0x13         ; устанавливаем значение 0x13 в регистр ah
mov al, 0            ; устанавливаем значение 0 в регистр al
mov bh, 0            ; устанавливаем значение 0 в регистр bh
mov bl, 0x1A         ; цвет текста
mov dl, 1           ; устанавливаем значение 1 в регистр dl
mov dh, 12           ; устанавливаем значение 12 в регистр dh
push cs              ; помещаем значение cs на стек
pop es               ; извлекаем значение сегмента cs в регистр es
mov bp, x3           ; устанавливаем значение x3 в регистр bp
mov cx, 13           ; устанавливаем значение 11 в регистр cx
int 0x10             ; вызываем прерывание 0x10
mov ah, 0x13         ; устанавливаем значение 0x13 в регистр ah
mov al, 0            ; устанавливаем значение 0 в регистр al
mov bh, 0            ; устанавливаем значение 0 в регистр bh
mov bl, 0x1A         ; цвет текста
mov dl, 1           ; устанавливаем значение 1 в регистр dl
mov dh, 13           ; устанавливаем значение 13 в регистр dh
push cs              ; помещаем значение cs на стек
pop es               ; извлекаем значение сегмента cs в регистр es
mov bp, x4           ; устанавливаем значение x4 в регистр bp
mov cx, 12           ; устанавливаем значение 12 в регистр cx
int 0x10             ; вызываем прерывание 0x10
hang:                ; метка hang
jmp hang             ; безусловный переход на метку hang (бесконечный цикл)

Oval:
push bp            ; Сохраняем значение bp на стеке
mov bp, sp         ; Загружаем значение sp в bp для доступа к параметрам функции
sub sp, 2          ; Резервируем место для локальной переменной
fld1               ; Загружаем значение 1.0 на вершину стека FPU (Floating-Point Unit)
fadd st, st       ; Умножаем значение на 2 для получения 2.0
fadd st, st
fimul word [bp+8]  ; Умножаем на больший диаметр (получаем 2 * RX)
fldpi              ; Загружаем значение числа пи на вершину стека FPU
fdivrp             ; Делим значение на 4 * RX для получения приращения угла (da)
fldz               ; Загружаем значение 0.0 на вершину стека FPU
mov cx, [bp+8]     ; Загружаем значение RX в cx
shl cx, 3          ; Умножаем значение на 8 (сдвиг влево на 3 бита, эквивалентно умножению на 8)
xor bh, bh         ; Обнуляем bh (видео страница)
mov ax, [bp+4]     ; Загружаем значение цвета пикселя в ax
mov ah, 0ch        ; Устанавливаем видеобайт в ah (режим графики)
@@: push cx        ; Сохраняем cx на стеке (счетчик цикла)
    fld st         ; Дублируем вершину стека FPU (угол)
    fsincos        ; Вычисляем синус и косинус угла
    fimul word [bp+8] ; Умножаем на RX
    fistp word [bp-2] ; Сохраняем результат в [bp-2]
    mov cx, [bp-2]   ; Загружаем значение X
    add cx, [bp+12]  ; Добавляем X0
    fimul word [bp+6] ; Умножаем на RY
    fistp word [bp-2] ; Сохраняем результат в [bp-2]
    mov dx, [bp-2]   ; Загружаем значение Y
    add dx, [bp+10]  ; Добавляем Y0
    int 10h          ; Вызываем прерывание видео BIOS для отрисовки пикселя
    fadd st, st1    ; Складываем вершины стека FPU (приращение угла)
    pop cx          ; Восстанавливаем cx из стека
    loop @b         ; Цикл, пока cx не равен 0
mov sp, bp          ; Восстанавливаем значение sp из bp
pop bp              ; Восстанавливаем значение bp из стека
ret 10              ; Возвращаемся из функции, освобождая 10 байт стека
times 510-($-$$) db 0 ; Заполняем пространство до 510 байт нулями

dw 0xAA55          ; Подпись загрузчика (Magic Number)
